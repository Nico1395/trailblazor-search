@page "/products"

@using Trailblazor.Search.App.Search
@using Trailblazor.Search.App.Search.Handlers

@implements IDisposable

<style>
    .filter {
        display:flex;
        flex-direction:column;
    }
</style>

<div style="width:100%; display:flex; flex-direction:column; gap:1rem;">
    <h1>Products</h1>

    <hr />

    <form @onsubmit="@OnSubmitAsync" style="display:flex; flex-direction:row; align-items:center; justify-content:space-between;">
        <div style="flex:1; display:flex; flex-direction:row; align-items:center; justify-content:start; gap:1rem; flex-wrap:wrap;">
            <input placeholder="Search..." @bind-value="@_request.SearchTerm.Value" />

            <div class="filter">
                <input type="number" placeholder="Sold" @bind-value="@_request.Sold.Value" />
                <InputSelect @bind-Value="_request.Sold.Mode">
                    @foreach (var mode in Enum.GetValues<SearchCriteriaMode>())
                    {
                        <option value="@mode">@mode</option>
                    }
                </InputSelect>
            </div>

            <div class="filter">
                <input type="number" placeholder="In stock" @bind-value="@_request.InStock.Value" />
                <InputSelect @bind-Value="_request.InStock.Mode">
                    @foreach (var mode in Enum.GetValues<SearchCriteriaMode>())
                    {
                        <option value="@mode">@mode</option>
                    }
                </InputSelect>
            </div>

            <div class="filter">
                <input type="datetime-local" placeholder="Created" @bind-value="@_request.Created.Value" />
                <InputSelect @bind-Value="_request.Created.Mode">
                    @foreach (var mode in Enum.GetValues<SearchCriteriaMode>())
                    {
                        <option value="@mode">@mode</option>
                    }
                </InputSelect>
            </div>

            <div class="filter">
                <input type="datetime-local" placeholder="LastChanged" @bind-value="@_request.LastChanged.Value" />
                <InputSelect @bind-Value="_request.LastChanged.Mode">
                    @foreach (var mode in Enum.GetValues<SearchCriteriaMode>())
                    {
                        <option value="@mode">@mode</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div style="flex-grow:0; flex-shrink:0;">
            <button class="btn-primary" type="submit">
                Search
            </button>
        </div>
    </form>

    <hr />

    <div style="display:flex; flex-direction:column; gap:0.7rem;">
        @if (_searchResults.Count == 0)
        {
            <p>No results</p>
        }
        else
        {
            foreach (var result in _searchResults)
            {
                if (result is ProductSearchResult productResult)
                {
                    <div style="border-radius:10px; border:1px solid black; padding:1rem; display:flex; flex-direction:column; gap:0.3rem;">
                        <h5>@($"{productResult.Product.Name} ({productResult.Product.Id})")</h5>
                        <div>@productResult.Product.Description</div>
                        <div>@($"In stock: {productResult.Product.InStock}")</div>
                        <div>@($"Sold: {productResult.Product.Sold}")</div>
                        <div>@($"Created: {productResult.Product.Created} - Changed: {productResult.Product.LastChanged}")</div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    private ProductSearchRequest _request = new();
    private IConcurrentSearchRequestCallback? _callback;
    private CancellationTokenSource _cancellationTokenSource = new();
    private EventHandler<SearchResponseChangedEventArgs>? _searchResponseChangedEventHandler;

    private List<ISearchResult> _searchResults = new();
    private bool _stillSearching;

    [Inject]
    private ISearchEngine SearchEngine { get; set; } = null!;

    public void Dispose()
    {
        if (_callback != null && _searchResponseChangedEventHandler != null)
            _callback.Unsubscribe(_searchResponseChangedEventHandler);
    }

    private async Task OnSubmitAsync(EventArgs args)
    {
        _callback = await SearchEngine.SendRequestAsync("products-search", _request, _cancellationTokenSource.Token);

        _searchResponseChangedEventHandler = async (_, args) => await OnSearchResponseChanged(args);
        _callback.Subscribe(_searchResponseChangedEventHandler);
    }

    private Task OnSearchResponseChanged(SearchResponseChangedEventArgs args)
    {
        return InvokeAsync(() => 
        {
            _searchResults = args.Response.Results.ToList();
            _stillSearching = !args.Progress.IsCompleted();

            StateHasChanged();
        });
    }
}
